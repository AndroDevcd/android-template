apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: 'jacoco'

def fileFilter = [
        '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*',
]
def mainSrc = "$project.projectDir/src/main/kotlin"
def configDir = "${project.rootDir}/config"
def reportDir = "${project.buildDir}/reports"
def debugTree
jacoco.toolVersion = versions.jacoco

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors

    productFlavors.each {

        productFlavorName ->
            //iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    //sourceName — e.g. freeDebug ,sourcePath — e.g. free/debug
                    def sourceName, sourcePath
                    if (!productFlavorName) {
                        sourceName = sourcePath = "${buildTypeName}"
                        debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                        sourcePath = "${productFlavorName}/${buildTypeName}"
                        debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${sourceName}", excludes: fileFilter)
                    }

                    def testTaskName = "test${sourceName.capitalize()}UnitTest"
                    def coverageReportTaskName = "create${sourceName.capitalize()}CoverageReport"
                    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["${testTaskName}", "${coverageReportTaskName}"]) {
                        group = 'Reporting'
                        reports {
                            xml.enabled = true
                            html.enabled = true
                        }

                        sourceDirectories = files([mainSrc])
                        classDirectories = files([debugTree])
                        executionData = fileTree(dir: project.buildDir, includes: [
                                "jacoco/${testTaskName}.exec", "outputs/code_coverage/${sourceName}AndroidTest/connected/*coverage.ec"
                        ])
                    }

                    task "${testTaskName}CoverageVerification"(type: JacocoCoverageVerification, dependsOn: "jacoco${testTaskName}Coverage") {
                        sourceDirectories = files([mainSrc])
                        classDirectories = files([debugTree])
                        executionData = files("${buildDir}/jacoco/${testTaskName}.exec")
                        violationRules {
                            failOnViolation = true
                            rule {
                                limit {
                                    minimum = 1
                                }
                            }
                        }
                    }
            }
    }
}